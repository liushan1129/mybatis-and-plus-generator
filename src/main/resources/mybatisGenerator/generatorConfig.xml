<!DOCTYPE generatorConfiguration PUBLIC
        "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--MyBatis3Simple风格-->
    <context id="simple" targetRuntime="MyBatis3Simple">
        <property name="javaFileEncoding" value="UTF-8"/>
        <!--为模型生成序列化方法-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!--为生成的Java模型创建一个toString方法-->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!--生成mapper.xml时覆盖原文件-->
        <plugin type="org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin"/>
        <commentGenerator>
            <!--是否去除自动生成的注释 true：是 ： false:否。 自动生成注释太啰嗦，可以编码扩展CommentGenerator-->
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>
        <!--数据库连接-->
        <jdbcConnection driverClass="${datasource.driver-class-name}"
                        connectionURL="${datasource.url}"
                        userId="${datasource.username}"
                        password="${datasource.password}">
            <!--设置为true就只读取big_event下的表, 否则会优先读取到mysql的user表-->
            <property name="nullCatalogMeansCurrent" value="true"/>
            <!--开启读取数据库注释：为了把注释写到相对应的注解里面-->
            <property name="remarksReporting" value="true"></property>
        </jdbcConnection>
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!--生成Model类存放位置-->
        <javaModelGenerator targetPackage="com.ls.domain" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
            <!--设置注解，%s占位符,读取数据库字段注释（多个注解用;分隔)，一个占位符读取数据库字段注释，第二数据库字段排序-->
            <property name="annotation" value="@Excel(name = &quot;%s&quot;, fixedIndex = %s);@ApiParam(value = &quot;%s&quot;)"/>
            <!--设置注解需要的包路径，多个用,分隔-->
            <property name="annotationTargetPackage" value="cn.afterturn.easypoi.excel.annotation.Excel,io.swagger.annotations.ApiParam"/>
        </javaModelGenerator>
        <!--生成PO的包名和位置-->
        <javaModelGenerator targetPackage="com.ls.pojo" targetProject="src/main/java"/>
        <!--生成XML映射文件的包名和位置-->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources"/>
        <!--生成Mapper接口的包名和位置-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.ls.mapper" targetProject="src/main/java"/>
        <!--要生成对应表配置-->
        <table tableName="user" domainObjectName="User">
            <!--自增主键列-->
            <generatedKey column="id" sqlStatement="MYSQL" identity="true"/>
            <!--tinyint映射为Integer-->
            <!--<columnOverride column="role" javaType="Integer" jdbcType="TINYINT"/>-->
        </table>
<!--        <table tableName="article" domainObjectName="Article">-->
<!--            &lt;!&ndash;自增主键列&ndash;&gt;-->
<!--            <generatedKey column="id" sqlStatement="MYSQL" identity="true"/>-->
<!--        </table>-->
<!--        <table tableName="category" domainObjectName="Category">-->
<!--            &lt;!&ndash;自增主键列&ndash;&gt;-->
<!--            <generatedKey column="id" sqlStatement="MYSQL" identity="true"/>-->
<!--        </table>-->
    </context>
</generatorConfiguration>